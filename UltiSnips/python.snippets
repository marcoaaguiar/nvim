global !p
import px.snippets
endglobal

global !p
# This function will jump to next placeholder when first is empty.
def jump_to_second_when_first_is_empty(snip):
    if px.snippets.get_jumper_position(snip) == 1:
        if not px.snippets.get_jumper_text(snip):
            px.snippets.advance_jumper(snip)

# This function will clean up first placeholder when this is empty.
def clean_first_placeholder(snip):
    # Jumper is a helper for performing jumps in UltiSnips.
    px.snippets.make_jumper(snip, 2)

    if snip.tabstop == 3 and not px.snippets.get_jumper_text(snip):
        # line = snip.buffer[snip.cursor[0]]
        number = px.snippets.get_jumper_position(snip)
        tabstop = snip.tabstops[number] 
        line = tabstop.start.line
        snip.buffer[line] = \
            snip.buffer[line][:tabstop.start[1]-1] + \
            snip.buffer[line][snip.tabstops[number].end[1]+1:]
endglobal

global !p
def get_args(arglist):
    args = [arg.split(':')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg != 'self']
    return args

def write_init_body(args, parents, snip):
    parents = [p.strip() for p in parents.split(",")]
    parents = [p for p in parents if len(p) and p != 'object']
    if parents:
        snip += "super().__init__(self)"
    for arg in filter(lambda arg: not arg.startswith("*"), args):
        snip += "self.%s = %s" % (arg, arg)
endglobal

snippet d "def"
def $1($2):
    ${3:pass}
endsnippet

snippet kv
"$1": "$2",
endsnippet

snippet rt
reveal_type($1)
endsnippet
    
snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    ${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
    ${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
    ${5:${VISUAL:pass}}
endsnippet

context "px.snippets.make_context(snip)"
post_jump "clean_first_placeholder(snip)"
snippet class "class with docstrings" b
class ${1:MyClass}(${2}):
	def __init__(self$3):`!p
snip.rv = ""
snip >> 2
args = get_args(t[3])
write_init_body(args, t[2], snip)
`
		$0
endsnippet

snippet defi
def __init__(self, ${1:args}):`!p
snip.rv = ""
snip >> 1
args = get_args(t[1])
write_init_body(args, '', snip)
snip+=""`$0
endsnippet

snippet san "None attribute"
self.$1 = None
endsnippet

snippet superinit "super"
super().__init__(*args, **kwargs)
endsnippet

snippet = "x=x"
$1=$1$0
endsnippet

snippet : "'x':x,"
"$1":$1,
endsnippet

snippet Ll "LOGGER = logging.getLogger(__name__)"
import logging

LOGGER = logging.getLogger(__name__)
endsnippet


snippet p "print('')"
print("${VISUAL:1}")$0
endsnippet

snippet property "@property"
@property
def $1(self) -> $2:
	return self._$1
endsnippet
